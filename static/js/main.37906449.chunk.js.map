{"version":3,"sources":["duck/reducers.js","duck/actions.js","duck/operations.js","duck/index.js","screens/CompaniesList/components/CompanyButton.js","screens/CompanyDetailsList/components/ProjectButton.js","screens/ProjectDetailsList/components/EmployeeButton.js","screens/EmployeeList/components/AreaModal.js","screens/EmployeeList/EmployeeList.js","screens/ProjectDetailsList/ProjectDetailsList.js","screens/CompanyDetailsList/CompanyDetailsList.js","screens/CompaniesList/CompaniesList.js","screens/CompaniesList/CompaniesListContainer.js","App.js","reducers.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","data","MainReducer","state","action","newState","JSON","parse","stringify","type","createActions","requestInitialData","receiveInitialData","startProjectUpdate","finishProjectUpdate","Creators","requestInitialDataAction","Types","receiveInitialDataAction","dispatch","fetch","then","response","json","db","passedState","method","headers","body","homeReducer","CompanyButton","GetInitialData","company","setCurrentlyOpenned","address","key","id","className","onClick","name","ProjectButton","project","setCurrentlyOpennedProject","EmployeeButton","employee","spliceEmployee","useState","style","display","marginBottom","firstName","lastName","AreaModal","currentState","closeModal","jobArea","jobAreaEmployee","setJobAreaEmployees","projectsNumb","setProjectsNumb","useEffect","tempEmployees","employees","filter","numb","projects","employeesId","includes","length","EmployeeList","setCurrentlyOpennedEmployee","projectsPartOf","setProjectsPartOf","areaModalOpen","setAreaModalOpen","tempProjects","jobTitle","jobType","map","index","ProjectDetailsList","UpdateProject","currentProject","setCurrentProject","excludedEmployees","setExcludedEmployees","currentProjectEmployees","setCurrentProjectEmployees","currentlyOpennedEmployee","editDetailsOpen","setCurrentState","inputValue","setInputValue","addEmployeesVisible","setAddEmployeesVisible","home","find","element","newEmployees","tempExcludedEmployees","console","log","user","newProject","tempState","foundIndex","findIndex","x","newTempEmployees","currentEmployeeIndex","splice","tempEmployeeIds","placeholder","defaultValue","onChange","e","target","value","alert","updateName","department","marginTop","item","push","pushEmployee","CompanyDetailsList","setCurrentlyOpennedCompany","currentlyOpennedProject","country","street","CompaniesList","currentlyOpennedCompany","currentCompanyProjects","setCurrentCompanyProjects","currentCompanyEmployees","setCurrentCompanyEmployees","companies","setComapnies","setProjects","setEmployees","companyAddresses","setCompanyAddresses","currentProjects","companyId","currentEmployees","Container","connect","homeOperations","CompaniesListComponent","CompaniesListContainer","App","exact","path","component","Component","rootReducer","combineReducers","Boolean","window","location","hostname","match","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37906449.chunk.js","sourcesContent":["const INITIAL_STATE = { data: false };\r\n\r\nconst MainReducer = (state = INITIAL_STATE, action) => {\r\n  const newState = JSON.parse(JSON.stringify(state));\r\n\r\n  switch (action.type) {\r\n    case \"RECEIVE_INITIAL_DATA\": {\r\n      const { data } = action;\r\n\r\n      return {\r\n        ...newState,\r\n        data,\r\n      };\r\n    }\r\n\r\n    case \"UPDATE_PROJECT\": {\r\n      const { data } = action;\r\n\r\n      return {\r\n        ...newState,\r\n        data,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default MainReducer;\r\n","import { createActions } from \"reduxsauce\";\r\n\r\nconst { Creators, Types } = createActions({\r\n  requestInitialData: [\"\"],\r\n  receiveInitialData: [\"data\"],\r\n\r\n  startProjectUpdate: [\"\"],\r\n  finishProjectUpdate: [\"data\"],\r\n});\r\n\r\nexport { Creators, Types };\r\n","// operations.js\r\nimport { Creators } from \"./actions\";\r\n\r\nconst requestInitialDataAction = Creators.requestInitialData;\r\nconst receiveInitialDataAction = Creators.receiveInitialData;\r\n\r\nconst startProjectUpdate = Creators.startProjectUpdate;\r\nconst finishProjectUpdateAction = Creators.finishProjectUpdate;\r\n\r\nconst fetchInitialData = () => {\r\n  return (dispatch) => {\r\n    dispatch(requestInitialDataAction());\r\n\r\n    return fetch(`http://localhost:5000/db`)\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const responseData = json;\r\n        const data = responseData.db;\r\n\r\n        dispatch(receiveInitialDataAction(data));\r\n      });\r\n  };\r\n};\r\n\r\nconst updateProject = (passedState) => {\r\n  return (dispatch) => {\r\n    dispatch(startProjectUpdate());\r\n\r\n    return fetch(`http://localhost:5000/db`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify(passedState),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        const responseData = json;\r\n\r\n        dispatch(receiveInitialDataAction(responseData));\r\n      });\r\n  };\r\n};\r\n\r\nexport default {\r\n  fetchInitialData,\r\n  updateProject,\r\n};\r\n","import homeReducer from \"./reducers\";\r\nexport { default as homeOperations } from \"./operations\";\r\n\r\nexport default homeReducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CompanyButtonCss from \"./CompanyButton.css\";\r\n\r\nconst CompanyButton = ({\r\n  GetInitialData,\r\n  company,\r\n  setCurrentlyOpenned,\r\n  address,\r\n}) => {\r\n  return (\r\n    <div\r\n      key={company.id}\r\n      className={\"container\"}\r\n      onClick={() => {\r\n        setCurrentlyOpenned(company);\r\n      }}\r\n    >\r\n      <h1>{company.name}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanyButton;\r\n","import React from \"react\";\r\n\r\nconst ProjectButton = ({ project, setCurrentlyOpennedProject }) => {\r\n  return (\r\n    <div\r\n      className={\"childButtonContainer\"}\r\n      onClick={() => {\r\n        setCurrentlyOpennedProject(project);\r\n      }}\r\n    >\r\n      <div className={\"childTitle\"}>{project.name}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProjectButton;\r\n","import React, { useState } from \"react\";\r\n\r\nconst EmployeeButton = ({ employee, onClick, spliceEmployee }) => {\r\n  const [currentProjectEmployees, setCurrentProjectEmployees] = useState(false);\r\n\r\n  return (\r\n    <div className=\"childTitle\" style={{ display: \"flex\" }}>\r\n      <button\r\n        className=\"childButtonContainer\"\r\n        style={{ marginBottom: \"0px\" }}\r\n        onClick={onClick}\r\n      >{`${employee.firstName} ${employee.lastName} `}</button>\r\n      <button\r\n        onClick={() => {\r\n          spliceEmployee(employee);\r\n        }}\r\n      >\r\n        X\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeButton;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ownCss from \"./AreaModal.css\";\r\n\r\nconst AreaModal = ({ currentState, closeModal, jobArea }) => {\r\n  const [jobAreaEmployee, setJobAreaEmployees] = useState(false);\r\n  const [projectsNumb, setProjectsNumb] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const tempEmployees = currentState.employees.filter(\r\n      (employee) => employee.jobArea === jobArea\r\n    );\r\n    setJobAreaEmployees(tempEmployees);\r\n\r\n    let numb = 0;\r\n\r\n    for (let project of currentState.projects) {\r\n      for (let employee of tempEmployees) {\r\n        if (project.employeesId.includes(employee.id)) {\r\n          numb++;\r\n        }\r\n      }\r\n    }\r\n\r\n    setProjectsNumb(numb);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"areaModalBackTrop\"\r\n      onClick={() => {\r\n        closeModal();\r\n      }}\r\n    >\r\n      <div className=\"areaModal\">\r\n        {`Job Area: ${jobArea}`}\r\n        <br />\r\n        {`Employees: ${jobAreaEmployee.length}`}\r\n        <br />\r\n        {`Projects Taken Part In: ${projectsNumb}`}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AreaModal;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport AreaModal from \"./components/AreaModal\";\r\n\r\nconst EmployeeList = ({\r\n  currentState,\r\n  employee,\r\n  setCurrentlyOpennedEmployee,\r\n}) => {\r\n  const [projectsPartOf, setProjectsPartOf] = useState(false);\r\n  const [areaModalOpen, setAreaModalOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const tempProjects = currentState.projects.filter((project) =>\r\n      project.employeesId.includes(employee.id)\r\n    );\r\n\r\n    setProjectsPartOf(tempProjects);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"treeWrapper\">\r\n      <div className=\"treeContainer\">\r\n        <div className=\"treeTitle\">\r\n          {`Employee: `}\r\n          <button\r\n            onClick={() => {\r\n              setCurrentlyOpennedEmployee(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n          <br /> {`${employee.firstName} ${employee.lastName}`}\r\n        </div>\r\n\r\n        <div className=\"treeTitle\"> Employee Datails </div>\r\n\r\n        <div className=\"treeTitle\"> Job Area: </div>\r\n        <div className=\"addressDepartmentTitle\">\r\n          <button\r\n            onClick={() => {\r\n              setAreaModalOpen(!areaModalOpen);\r\n            }}\r\n          >\r\n            {employee.jobArea}\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"treeTitle\"> Job Title: </div>\r\n        <div className=\"addressDepartmentTitle\">{employee.jobTitle}</div>\r\n\r\n        <div className=\"treeTitle\"> Job Type: </div>\r\n        <div className=\"addressDepartmentTitle\">{employee.jobType}</div>\r\n\r\n        <div className=\"treeTitle\">\r\n          Part of projects:\r\n          {projectsPartOf &&\r\n            projectsPartOf.map((project, index) => {\r\n              return (\r\n                <div key={project.name} className={\"addressDepartmentTitle\"}>\r\n                  {project.name}\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n\r\n      {areaModalOpen && (\r\n        <AreaModal\r\n          closeModal={() => {\r\n            setAreaModalOpen(!areaModalOpen);\r\n          }}\r\n          currentState={currentState}\r\n          jobArea={employee.jobArea}\r\n        ></AreaModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeList;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport OwnCss from \"./ProjectDetailsStyle.css\";\r\n\r\nimport EmployeeButton from \"./components/EmployeeButton\";\r\nimport EmployeesList from \"../EmployeeList/EmployeeList\";\r\n\r\nconst ProjectDetailsList = ({\r\n  project,\r\n  employees,\r\n  setCurrentlyOpennedProject,\r\n  state,\r\n  UpdateProject,\r\n}) => {\r\n  const [currentProject, setCurrentProject] = useState(false);\r\n  const [excludedEmployees, setExcludedEmployees] = useState(false);\r\n  const [currentProjectEmployees, setCurrentProjectEmployees] = useState(false);\r\n  const [currentlyOpennedEmployee, setCurrentlyOpennedEmployee] = useState(\r\n    false\r\n  );\r\n  const [editDetailsOpen, setEditDetailsOpen] = useState(false);\r\n  const [currentState, setCurrentState] = useState(false);\r\n  const [inputValue, setInputValue] = useState(currentProject.name);\r\n  const [addEmployeesVisible, setAddEmployeesVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setCurrentProject(project);\r\n    setCurrentState(state.home.data);\r\n  }, [project]);\r\n\r\n  useEffect(() => {\r\n    if (currentProject) {\r\n      const tempProject = currentState.projects.find((element) => {\r\n        return element.id === currentProject.id;\r\n      });\r\n\r\n      const newEmployees = employees.filter((employee) =>\r\n        currentProject.employeesId.includes(employee.id)\r\n      );\r\n\r\n      const tempExcludedEmployees = employees.filter(\r\n        (employee) => !currentProject.employeesId.includes(employee.id)\r\n      );\r\n\r\n      console.log(tempExcludedEmployees.length > 0);\r\n      console.log(tempExcludedEmployees.length);\r\n\r\n      setInputValue(currentProject.name);\r\n      setCurrentProjectEmployees(newEmployees);\r\n      setExcludedEmployees(tempExcludedEmployees);\r\n      setCurrentlyOpennedEmployee(false);\r\n    }\r\n  }, [currentProject]);\r\n\r\n  const updateName = () => {\r\n    if (inputValue !== \"\") {\r\n      const newProject = JSON.parse(JSON.stringify(currentProject));\r\n      const tempState = JSON.parse(JSON.stringify(currentState));\r\n      const foundIndex = tempState.projects.findIndex(\r\n        (x) => x.id == newProject.id\r\n      );\r\n\r\n      newProject.name = inputValue;\r\n      tempState.projects[foundIndex] = newProject;\r\n\r\n      UpdateProject(tempState);\r\n      setCurrentState(tempState);\r\n      setCurrentProject(tempState.projects[foundIndex]);\r\n    } else alert(\"No Name Given\");\r\n  };\r\n\r\n  const spliceEmployee = (user) => {\r\n    const newProject = JSON.parse(JSON.stringify(currentProject));\r\n    const tempState = JSON.parse(JSON.stringify(currentState));\r\n    const foundIndex = tempState.projects.findIndex(\r\n      (x) => x.id == newProject.id\r\n    );\r\n\r\n    const newTempEmployees = employees.filter((employee) =>\r\n      newProject.employeesId.includes(employee.id)\r\n    );\r\n\r\n    const currentEmployeeIndex = newTempEmployees.findIndex(\r\n      (x) => x.id === user.id\r\n    );\r\n\r\n    newTempEmployees.splice(currentEmployeeIndex, 1);\r\n    const tempEmployeeIds = newTempEmployees.map((x) => x.id);\r\n\r\n    newProject.employeesId = tempEmployeeIds;\r\n    tempState.projects[foundIndex] = newProject;\r\n\r\n    UpdateProject(tempState);\r\n    setCurrentState(tempState);\r\n    setCurrentProject(tempState.projects[foundIndex]);\r\n  };\r\n\r\n  const pushEmployee = (employee) => {\r\n    console.log(employee);\r\n\r\n    const newProject = JSON.parse(JSON.stringify(currentProject));\r\n    const tempState = JSON.parse(JSON.stringify(currentState));\r\n    const foundIndex = tempState.projects.findIndex(\r\n      (x) => x.id == newProject.id\r\n    );\r\n\r\n    newProject.employeesId.push(employee.id);\r\n    tempState.projects[foundIndex] = newProject;\r\n\r\n    UpdateProject(tempState);\r\n    setCurrentState(tempState);\r\n    setCurrentProject(tempState.projects[foundIndex]);\r\n  };\r\n\r\n  // const addEmploye\r\n\r\n  if (currentProject)\r\n    return (\r\n      <Fragment>\r\n        <div className=\"treeContainer\">\r\n          <div className=\"titleFlex\">\r\n            <div>\r\n              <input\r\n                className=\"treeTitle\"\r\n                style={{ marginBottom: \"0px\" }}\r\n                placeholder={inputValue}\r\n                defaultValue={inputValue}\r\n                onChange={(e) => {\r\n                  setInputValue(e.target.value);\r\n                }}\r\n              ></input>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  setCurrentlyOpennedProject(false);\r\n                }}\r\n              >\r\n                X\r\n              </button>\r\n            </div>\r\n\r\n            <button\r\n              onClick={() => {\r\n                updateName();\r\n              }}\r\n            >\r\n              Change Project Name\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"treeTitle\">Department:</div>\r\n          <div className=\"addressDepartmentTitle\">\r\n            {currentProject.department}\r\n          </div>\r\n\r\n          {currentProjectEmployees && currentProjectEmployees.length > 0 ? (\r\n            <Fragment>\r\n              <div className=\"treeTitle\">\r\n                Employees: <br />\r\n              </div>\r\n              {currentProjectEmployees.map((employee, index) => {\r\n                return (\r\n                  <EmployeeButton\r\n                    employee={employee}\r\n                    key={employee.id}\r\n                    onClick={() => {\r\n                      setCurrentlyOpennedEmployee(employee);\r\n                    }}\r\n                    spliceEmployee={spliceEmployee}\r\n                  ></EmployeeButton>\r\n                );\r\n              })}\r\n            </Fragment>\r\n          ) : (\r\n            <div className=\"treeTitle\">\r\n              No Employees\r\n              <br />\r\n            </div>\r\n          )}\r\n\r\n          {excludedEmployees.length > 0 ? (\r\n            <button\r\n              style={{ marginTop: \"10px\" }}\r\n              onClick={() => {\r\n                setAddEmployeesVisible(!addEmployeesVisible);\r\n              }}\r\n            >\r\n              Add Employee\r\n            </button>\r\n          ) : null}\r\n\r\n          {addEmployeesVisible && excludedEmployees.length !== 0\r\n            ? excludedEmployees.map((item, index) => {\r\n                return (\r\n                  <div key={index}>\r\n                    {`${item.firstName} ${item.lastName} `}\r\n                    <button\r\n                      onClick={() => {\r\n                        pushEmployee(item);\r\n                      }}\r\n                    >\r\n                      +\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })\r\n            : null}\r\n        </div>\r\n\r\n        {currentlyOpennedEmployee && (\r\n          <EmployeesList\r\n            employee={currentlyOpennedEmployee}\r\n            currentState={currentState}\r\n            setCurrentlyOpennedEmployee={setCurrentlyOpennedEmployee}\r\n          />\r\n        )}\r\n\r\n        {editDetailsOpen && <div>Edit Sad</div>}\r\n      </Fragment>\r\n    );\r\n  else return null;\r\n};\r\n\r\nexport default ProjectDetailsList;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\n\r\nimport ProjectButton from \"./components/ProjectButton\";\r\nimport ProjectDetaisList from \"../ProjectDetailsList/ProjectDetailsList\";\r\n\r\nconst CompanyDetailsList = ({\r\n  UpdateProject,\r\n  state,\r\n  address,\r\n  company,\r\n  projects,\r\n  employees,\r\n  setCurrentlyOpennedCompany,\r\n}) => {\r\n  const [currentlyOpennedProject, setCurrentlyOpennedProject] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setCurrentlyOpennedProject(false);\r\n  }, [company]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"treeContainer\">\r\n        <div className=\"treeTitle\">\r\n          {\"Company: \"}\r\n          <button\r\n            onClick={() => {\r\n              setCurrentlyOpennedCompany(false);\r\n            }}\r\n          >\r\n            X\r\n          </button>\r\n          <br />\r\n          {company.name}\r\n        </div>\r\n        <div className=\"treeTitle\">Address</div>\r\n        <div className=\"addressDepartmentTitle\">\r\n          <div>{address.country}</div>\r\n          <div>{address.state}</div>\r\n          <div>{address.street}</div>\r\n        </div>\r\n\r\n        {projects && projects.length > 1 ? (\r\n          <Fragment>\r\n            <div className=\"treeTitle\">Projects</div>\r\n            {projects.map((project, index) => {\r\n              return (\r\n                <ProjectButton\r\n                  key={project.id}\r\n                  project={project}\r\n                  setCurrentlyOpennedProject={setCurrentlyOpennedProject}\r\n                ></ProjectButton>\r\n              );\r\n            })}\r\n          </Fragment>\r\n        ) : (\r\n          <div className=\"treeTitle\">No Present Projects</div>\r\n        )}\r\n      </div>\r\n\r\n      {currentlyOpennedProject && (\r\n        <ProjectDetaisList\r\n          project={currentlyOpennedProject}\r\n          employees={employees}\r\n          setCurrentlyOpennedProject={setCurrentlyOpennedProject}\r\n          state={state}\r\n          UpdateProject={UpdateProject}\r\n        ></ProjectDetaisList>\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CompanyDetailsList;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport CompanyListCss from \"../../sharedScreenStyles/index.css\";\r\n\r\nimport CompanyButton from \"./components/CompanyButton\";\r\nimport DetailsList from \"../CompanyDetailsList/CompanyDetailsList\";\r\n\r\nconst CompaniesList = ({ GetInitialData, UpdateProject, state }) => {\r\n  const [currentlyOpennedCompany, setCurrentlyOpennedCompany] = useState(false);\r\n  const [currentCompanyProjects, setCurrentCompanyProjects] = useState(false);\r\n  const [currentCompanyEmployees, setCurrentCompanyEmployees] = useState(false);\r\n\r\n  const [companies, setComapnies] = useState(false);\r\n  const [projects, setProjects] = useState(false);\r\n  const [employees, setEmployees] = useState(false);\r\n  const [companyAddresses, setCompanyAddresses] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!state.home.data) {\r\n      GetInitialData();\r\n    }\r\n\r\n    setComapnies(state.home.data.companies);\r\n    setProjects(state.home.data.projects);\r\n    setEmployees(state.home.data.employees);\r\n    setCompanyAddresses(state.home.data[\"company-addresses\"]);\r\n  }, [state.home.data]);\r\n\r\n  useEffect(() => {\r\n    if (projects) {\r\n      const currentProjects = projects.filter(\r\n        (project) => project.companyId === currentlyOpennedCompany.id\r\n      );\r\n      const currentEmployees = employees.filter(\r\n        (employee) => employee.companyId === currentlyOpennedCompany.id\r\n      );\r\n\r\n      console.log(currentEmployees);\r\n\r\n      setCurrentCompanyEmployees(currentEmployees);\r\n      setCurrentCompanyProjects(currentProjects);\r\n    }\r\n  }, [currentlyOpennedCompany, projects]);\r\n\r\n  return (\r\n    <div className=\"treeWrapper\">\r\n      <div className=\"treeContainer\">\r\n        <div className=\"treeTitle\">Companies</div>\r\n        {companies\r\n          ? companies.map((company, index) => {\r\n              return (\r\n                <CompanyButton\r\n                  key={company.id}\r\n                  company={company}\r\n                  setCurrentlyOpenned={setCurrentlyOpennedCompany}\r\n                ></CompanyButton>\r\n              );\r\n            })\r\n          : null}\r\n      </div>\r\n\r\n      {currentlyOpennedCompany && (\r\n        <DetailsList\r\n          address={companyAddresses.find(\r\n            (x) => currentlyOpennedCompany.id === x.companyId\r\n          )}\r\n          setCurrentlyOpennedCompany={setCurrentlyOpennedCompany}\r\n          company={currentlyOpennedCompany}\r\n          projects={currentCompanyProjects}\r\n          employees={currentCompanyEmployees}\r\n          state={state}\r\n          UpdateProject={UpdateProject}\r\n        ></DetailsList>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompaniesList;\r\n","import React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { homeOperations } from \"../../duck\";\r\n\r\nimport CompaniesListComponent from \"./CompaniesList\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    state,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  const GetInitialData = () => dispatch(homeOperations.fetchInitialData());\r\n  const UpdateProject = (data) => dispatch(homeOperations.updateProject(data));\r\n\r\n  return {\r\n    GetInitialData,\r\n    UpdateProject,\r\n  };\r\n};\r\n\r\nconst Container = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CompaniesListComponent);\r\n\r\nfunction CompaniesListContainer() {\r\n  return <Container></Container>;\r\n}\r\n\r\nexport default CompaniesListContainer;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CompaniesListContainer from \"./screens/CompaniesList/CompaniesListContainer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path=\"**\" component={CompaniesListContainer} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport MainReducer from \"./duck\";\r\n\r\nconst rootReducer = combineReducers({\r\n  home: MainReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport App from \"./App\";\nimport rootReducer from \"./reducers\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport indexCss from \"./index.css\";\n\nconst composeEnhancers = composeWithDevTools({});\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <div className=\"bodyClass\">\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}